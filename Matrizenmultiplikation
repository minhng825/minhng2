from math import log


def showMatrix(m):
    for line in m:
        print('|', end='')
        i = 0
        for value in line:
            if i > 0:
                print(' ', end='')
            print(value, end='')
            i = i + 1
        print("|")


def matrix(r, c):  # Create a new matrix filled with zeros.
    matrix = [[0 for row in range(r)] for col in range(c)]
    return matrix


def matMultDef(a, b):  # multiply two matrices according to the definition of matrix multiplication
    print('Parameter a:')
    showMatrix(a)
    print('Parameter b:')
    showMatrix(b)

    if len(a[0]) != len(b):
        print('Can not multiply')
        return

    result = matrix(len(b[0]), len(a))  # Dimensions would be rows_a x cols_b
    for i in range(len(a)):
        for j in range(len(b[0])):
            for k in range(len(b)):
                result[i][j] += a[i][k] * b[k][j]
    return result


def add(a, b):  # add two matrices according to the definition of matrix addition
    assert len(a) == len(b)
    assert len(a[0]) == len(b[0])
    c = matrix(len(a), len(a[0]))
    for i in range(0, len(a)):
        for j in range(0, (len(a[0]))):
            c[i][j] = a[i][j] + b[i][j]
    return c


def subtract(a, b):  # subtract two matrices according to the definition of matrix subtraction
    assert len(a) == len(b)
    assert len(a[0]) == len(b[0])
    c = matrix(len(a), len(a[0]))
    for i in range(0, len(a)):
        for j in range(0, (len(a[0]))):
            c[i][j] = a[i][j] - b[i][j]
    return c


def strassen(a, b):
    # Basis case
    # multiply two square nxn matrices using the Strassen Algorithm
    assert len(a[0]) == len(b)
    n = len(a)

    if n == 1:
        c = [[0]]
        c[0][0] = a[0][0] * b[0][0]
        return c
    else:
        # split a and b into 4 equal matrices
        mid = int(n/2)
        a11 = [[a[i][j] for j in range(mid)] for i in range(mid)]
        a12 = [[a[i][j] for j in range(mid, n)] for i in range(mid)]
        a21 = [[a[i][j] for j in range(mid)] for i in range(mid, n)]
        a22 = [[a[i][j] for j in range(mid, n)] for i in range(mid, n)]

        b11 = [[b[i][j] for j in range(mid)] for i in range(mid)]
        b12 = [[b[i][j] for j in range(mid, n)] for i in range(mid)]
        b21 = [[b[i][j] for j in range(mid)] for i in range(mid, n)]
        b22 = [[b[i][j] for j in range(mid, n)] for i in range(mid, n)]

    # calculate P, Q, R, S, T, U and V (recursively) for the calculation of c11, c12, c21, c22
    P = strassen(add(a11, a22), add(b11, b22))  # P = (a11+a22) * (b11+b22)
    Q = strassen(add(a21, a22), b11)  # Q = (a21+a22) * (b11)
    R = strassen(a11, subtract(b12, b22))  # R = (a11) * (b12 - b22)
    S = strassen(a22, subtract(b21, b11))  # S = (a22) * (b21 - b11)
    T = strassen(add(a11, a12), b22)  # T = (a11+a12) * (b22)
    U = strassen(subtract(a21, a11), add(b11, b12))  # U = (a21-a11) * (b11+b12)
    V = strassen(subtract(a12, a22), add(b21, b22))  # V = (a12-a22) * (b21+b22)

    # calculate 'quarter' matrices c11, c22, c21 and c22 that together build up the result matrix C
    c11 = subtract(add(add(P, S), V), T)   # c11 = P + S - T + V
    c12 = add(R, T)            # c12 = R + T
    c21 = add(Q, S)            # c21 = Q + S
    c22 = subtract(add(add(P, R), U), Q)   # c22 = P + R - Q + U

    # fill the result matrix C with the calculated values from c11, c12, c21 and c22
    C = matrix(n, n)
    for i in range(0, mid):
        for j in range(0, mid):
            C[i][j] = c11[i][j]
            C[i][j + mid] = c12[i][j]
            C[i + mid][j] = c21[i][j]
            C[i + mid][j + mid] = c22[i][j]
    return C


def matMultSA(a, b):
    # Complex case
    # n x m Matrix using the Strassen Algorithm
    # make each matrix a square by increasing it's size to the next power of two.
    print('Parameter a:')
    showMatrix(a)
    print('Parameter b:')
    showMatrix(b)

    assert len(a[0]) == len(b)

    n = max(len(a), len(a[0]), len(b), len(b[0]))
    exp = log(n, 2)
    if exp % 1 > 0:
        exp = int(exp) + 1
    m = 2 ** exp

    X = matrix(m, m)
    Y = matrix(m, m)
    for i in range(len(a)):
        for j in range(len(a[0])):
            X[i][j] = a[i][j]
    for i in range(len(b)):
        for j in range(len(b[0])):
            Y[i][j] = b[i][j]
    C = strassen(X, Y)

    result = matrix(len(b[0]), len(a))
    for i in range(len(a)):
        for j in range(len(b[0])):
            result[i][j] = C[i][j]
    return result



a = [[3, 2, 1], [1, 0, 2]]
b = [[1, 2 , 2,1,7], [0, 1,2,1,4], [4, 0,3,2,1]]
result1 = matMultDef(a, b)
print('Result a*b (Def): ')
showMatrix(result1)


result2 = matMultSA(a, b)
print('Result a*b (SA): ')
showMatrix(result2)
